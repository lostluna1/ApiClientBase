using System.Collections.ObjectModel;
using System.Diagnostics;
using ApiClient.Contracts.Services;
using ApiClient.Core.Contracts.Services;
using ApiClient.Core.Models;
using ApiClient.Messages;
using CommunityToolkit.Mvvm.ComponentModel;
using CommunityToolkit.Mvvm.Input;
using CommunityToolkit.Mvvm.Messaging;
using Microsoft.UI.Xaml;
using Newtonsoft.Json;

namespace ApiClient.ViewModels;

// 查询参数项
public partial class QueryParameterViewModel : ObservableObject
{
    [ObservableProperty]
    public partial bool IsEnabled { get; set; } = true;

    [ObservableProperty]
    public partial string Key { get; set; } = string.Empty;

    [ObservableProperty]
    public partial string Value { get; set; } = string.Empty;

    [ObservableProperty]
    public partial string Description { get; set; } = string.Empty;
}

// 表单数据项
public partial class FormDataItemViewModel : ObservableObject
{
    [ObservableProperty]
    public partial bool IsEnabled { get; set; } = true;

    [ObservableProperty]
    public partial string Key { get; set; } = string.Empty;

    [ObservableProperty]
    public partial string Value { get; set; } = string.Empty;

    [ObservableProperty]
    public partial string Type { get; set; } = "text"; // text, file

    [ObservableProperty]
    public partial string Description { get; set; } = string.Empty;
}

// 请求头项
public partial class HeaderItemViewModel : ObservableObject
{
    [ObservableProperty]
    public partial bool IsEnabled { get; set; } = true;

    [ObservableProperty]
    public partial string Key { get; set; } = string.Empty;

    [ObservableProperty]
    public partial string Value { get; set; } = string.Empty;

    [ObservableProperty]
    public partial string Description { get; set; } = string.Empty;

    [ObservableProperty]
    public partial bool IsAutoGenerated { get; set; } = false;
}

/// <summary>
/// 请求标签页的ViewModel
/// </summary>
public partial class RequestTabViewModel : ObservableObject, IRecipient<ThemeChangedMessage>
{
    private readonly IHttpClientService _httpClientService;
    private readonly IEnvironmentService _environmentService;


    [ObservableProperty]
    public partial string TabId { get; set; } = Guid.NewGuid().ToString();

    [ObservableProperty]
    public partial string TabTitle { get; set; } = "新建请求";

    [ObservableProperty]
    public partial string SelectedMethod { get; set; } = RequestMethodModel.Get;

    [ObservableProperty]
    public partial string RequestUrl { get; set; } = string.Empty;

    [ObservableProperty]
    public partial string RequestBody { get; set; } = string.Empty;

    [ObservableProperty]
    public partial string ResponseContent { get; set; } = string.Empty;

    [ObservableProperty]
    public partial string ResponseHeaders { get; set; } = string.Empty;

    [ObservableProperty]
    public partial int ResponseStatusCode
    {
        get; set;
    }

    [ObservableProperty]
    public partial string ResponseStatusText { get; set; } = string.Empty;

    [ObservableProperty]
    public partial long ResponseTime
    {
        get; set;
    }

    [ObservableProperty]
    public partial string SelectedContentType { get; set; } = "application/json";

    [ObservableProperty]
    public partial string CustomHeaders { get; set; } = string.Empty;

    [ObservableProperty]
    public partial bool IsModified { get; set; } = false;

    // 新增属性：Body类型选择
    [ObservableProperty]
    public partial string SelectedBodyType { get; set; } = "json";

    // 新增属性：查询参数
    public ObservableCollection<QueryParameterViewModel> QueryParameters { get; } = [];

    // 新增属性：表单数据
    public ObservableCollection<FormDataItemViewModel> FormDataItems { get; } = [];

    // 新增属性：请求头
    public ObservableCollection<HeaderItemViewModel> HeaderItems { get; } = [];

    // 新增属性：Raw文本内容
    [ObservableProperty]
    public partial string RawBody { get; set; } = string.Empty;

    /// <summary>
    /// 统一的编辑器内容，根据SelectedBodyType决定使用RequestBody还是RawBody
    /// </summary>
    public string UnifiedBodyContent
    {
        get => SelectedBodyType == "raw" ? RawBody : RequestBody;
        set
        {
            if (SelectedBodyType == "raw")
            {
                RawBody = value;
            }
            else
            {
                RequestBody = value;
            }
        }
    }

    /// <summary>
    /// 根据SelectedBodyType确定编辑器语言
    /// </summary>
    public string EditorLanguage => SelectedBodyType switch
    {
        "json" => "json",
        "xml" => "xml",
        "raw" => "plaintext",
        _ => "plaintext"
    };

    /// <summary>
    /// 统一编辑器是否应该可见（json、xml、raw时可见）
    /// </summary>
    public bool IsUnifiedEditorVisible => SelectedBodyType is "json" or "xml" or "raw";

    /// <summary>
    /// 是否是当前选中的标签页
    /// </summary>
    [ObservableProperty]
    public partial bool IsCurrentTab { get; set; } = false;

    /// <summary>
    /// 关联的请求记录
    /// </summary>
    public RequestRecord? AssociatedRequest
    {
        get; set;
    }

    public ObservableCollection<string> HttpMethods
    {
        get;
    } =
    [
        "GET", "POST", "PUT", "DELETE", "PATCH", "HEAD", "OPTIONS"
    ];

    public ObservableCollection<string> ContentTypes
    {
        get;
    } =
    [
        "application/json",
        "application/xml",
        "text/plain",
        "application/x-www-form-urlencoded",
        "multipart/form-data"
    ];

    // Body类型选项
    public ObservableCollection<string> BodyTypes
    {
        get;
    } =
    [
        "none", "form-data", "json", "raw", "xml"
    ];

    // 新增：响应体标签页选项
    public ObservableCollection<string> ResponseTabs
    {
        get;
    } =
    [
        "body", "headers"
    ];

    // 新增：请求配置标签页选项
    public ObservableCollection<string> RequestConfigTabs
    {
        get;
    } =
    [
        "params", "body", "headers"
    ];

    // 新增：当前选中的请求配置标签页
    [ObservableProperty]
    public partial string SelectedRequestConfigTab { get; set; } = "params";

    // 新增：当前选中的响应标签页
    [ObservableProperty]
    public partial string SelectedResponseTab { get; set; } = "body";

    // 常用请求头选项
    public ObservableCollection<string> CommonHeaders
    {
        get;
    } =
    [
        "Accept",
        "Accept-Encoding",
        "Accept-Language",
        "Authorization",
        "Cache-Control",
        "Content-Type",
        "Cookie",
        "Host",
        "Referer",
        "User-Agent",
        "X-Requested-With"
    ];

    [ObservableProperty]
    public partial Monaco.EditorThemes CurrentTheme { get; set; } = Monaco.EditorThemes.VisualStudioLight;

    /// <summary>
    /// 接收主题变化消息
    /// </summary>
    public void Receive(ThemeChangedMessage message)
    {
        var actualTheme = message.NewTheme switch
        {
            ElementTheme.Dark => Monaco.EditorThemes.VisualStudioDark,
            ElementTheme.Light => Monaco.EditorThemes.VisualStudioLight,
            _ => Monaco.EditorThemes.VisualStudioLight // 默认使用浅色主题
        };
        CurrentTheme = actualTheme;
        //OnPropertyChanged(nameof(EditorThemeClass));


        System.Diagnostics.Debug.WriteLine($"RequestTabViewModel 收到主题变化通知: {message.NewTheme}");
    }

    // 在析构或清理时取消注册
    protected virtual void Dispose()
    {
        WeakReferenceMessenger.Default.Unregister<ThemeChangedMessage>(this);
    }
    public RequestTabViewModel(IHttpClientService httpClientService, IEnvironmentService environmentService)
    {
        _httpClientService = httpClientService;
        _environmentService = environmentService;
        // 注册为消息接收者
        WeakReferenceMessenger.Default.Register<ThemeChangedMessage>(this);

        // 初始化当前主题
        try
        {
            var themeSelectorService = App.GetService<IThemeSelectorService>();
            var theme = themeSelectorService.Theme;
            CurrentTheme = theme switch
            {
                ElementTheme.Dark => Monaco.EditorThemes.VisualStudioDark,
                ElementTheme.Light => Monaco.EditorThemes.VisualStudioLight,
                _ => Monaco.EditorThemes.VisualStudioLight // 默认使用浅色主题
            };
            //CurrentTheme = themeSelectorService.Theme;
        }
        catch
        {
            CurrentTheme = Monaco.EditorThemes.VisualStudioLight;
        }
        // 监听属性变化以标记为已修改
        PropertyChanged += (_, e) =>
        {
            if (e.PropertyName is nameof(RequestUrl) or nameof(RequestBody) or nameof(SelectedMethod)
                or nameof(CustomHeaders) or nameof(SelectedContentType) or nameof(SelectedBodyType) or nameof(RawBody))
            {
                IsModified = true;
            }

            // 当RequestBody或RawBody变化时，通知UnifiedBodyContent
            if (e.PropertyName is nameof(RequestBody) or nameof(RawBody))
            {
                OnPropertyChanged(nameof(UnifiedBodyContent));
            }

            // 当ResponseContent变化时，通知ResponseEditorLanguage
            if (e.PropertyName is nameof(ResponseContent))
            {
                OnPropertyChanged(nameof(ResponseEditorLanguage));
            }
        };

        // 监听HTTP方法变化，自动生成headers
        PropertyChanged += OnMethodChanged;
        PropertyChanged += OnBodyTypeChanged;

        // 初始化默认查询参数和请求头
        AddDefaultItems();
    }

    partial void OnSelectedMethodChanged(string value)
    {
        GenerateAutoHeaders();
    }

    partial void OnSelectedBodyTypeChanged(string value)
    {
        GenerateAutoHeaders();
        UpdateContentType();

        // 通知统一编辑器相关属性变化
        OnPropertyChanged(nameof(UnifiedBodyContent));
        OnPropertyChanged(nameof(EditorLanguage));
        OnPropertyChanged(nameof(IsUnifiedEditorVisible));
    }

    private void OnMethodChanged(object? sender, System.ComponentModel.PropertyChangedEventArgs e)
    {
        if (e.PropertyName == nameof(SelectedMethod))
        {
            GenerateAutoHeaders();
        }
    }

    private void OnBodyTypeChanged(object? sender, System.ComponentModel.PropertyChangedEventArgs e)
    {
        if (e.PropertyName == nameof(SelectedBodyType))
        {
            GenerateAutoHeaders();
            UpdateContentType();
        }
    }

    private void AddDefaultItems()
    {
        // 添加一个空的查询参数行
        QueryParameters.Add(new QueryParameterViewModel());

        // 添加一个空的表单数据行
        FormDataItems.Add(new FormDataItemViewModel());

        // 生成基础headers
        GenerateAutoHeaders();
    }

    private void GenerateAutoHeaders()
    {
        // 获取现有的非自动生成的headers，以避免重复
        var existingCustomHeaders = HeaderItems
            .Where(h => !h.IsAutoGenerated)
            .Select(h => h.Key.ToLower())
            .ToHashSet();

        // 清除之前自动生成的headers
        for (var i = HeaderItems.Count - 1; i >= 0; i--)
        {
            if (HeaderItems[i].IsAutoGenerated)
            {
                HeaderItems.RemoveAt(i);
            }
        }

        // 根据请求类型自动生成headers
        var autoHeaders = new List<HeaderItemViewModel>();

        // 基础headers - 只添加不存在的
        if (!existingCustomHeaders.Contains("user-agent"))
        {
            autoHeaders.Add(new HeaderItemViewModel
            {
                Key = "User-Agent",
                Value = "ApiClient/1.0.0",
                IsAutoGenerated = true,
                IsEnabled = true,
                Description = "客户端标识"
            });
        }

        if (!existingCustomHeaders.Contains("accept"))
        {
            autoHeaders.Add(new HeaderItemViewModel
            {
                Key = "Accept",
                Value = "*/*",
                IsAutoGenerated = true,
                IsEnabled = true,
                Description = "接受的响应类型"
            });
        }

        if (!existingCustomHeaders.Contains("accept-encoding"))
        {
            autoHeaders.Add(new HeaderItemViewModel
            {
                Key = "Accept-Encoding",
                Value = "gzip, deflate, br",
                IsAutoGenerated = true,
                IsEnabled = true,
                Description = "支持的编码格式"
            });
        }

        // 根据Body类型添加Content-Type
        if (SelectedBodyType != "none" && SelectedMethod != "GET" && !existingCustomHeaders.Contains("content-type"))
        {
            var contentType = SelectedBodyType switch
            {
                "json" => "application/json",
                "xml" => "application/xml",
                "form-data" => "multipart/form-data",
                "raw" => "text/plain",
                _ => "application/json"
            };

            autoHeaders.Add(new HeaderItemViewModel
            {
                Key = "Content-Type",
                Value = contentType,
                IsAutoGenerated = true,
                IsEnabled = true,
                Description = "请求体内容类型"
            });
        }

        // 根据HTTP方法添加特定headers
        if ((SelectedMethod == "POST" || SelectedMethod == "PUT" || SelectedMethod == "PATCH") &&
            !existingCustomHeaders.Contains("cache-control"))
        {
            autoHeaders.Add(new HeaderItemViewModel
            {
                Key = "Cache-Control",
                Value = "no-cache",
                IsAutoGenerated = true,
                IsEnabled = false,
                Description = "缓存控制"
            });
        }

        // 添加到集合中（插入到自定义headers之后）
        var customHeaderCount = HeaderItems.Count(h => !h.IsAutoGenerated);
        for (var i = 0; i < autoHeaders.Count; i++)
        {
            HeaderItems.Insert(customHeaderCount + i, autoHeaders[i]);
        }

        // 确保有一个空行供用户添加自定义header
        if (!HeaderItems.Any(h => !h.IsAutoGenerated && string.IsNullOrEmpty(h.Key)))
        {
            HeaderItems.Add(new HeaderItemViewModel());
        }
    }

    private void UpdateContentType()
    {
        SelectedContentType = SelectedBodyType switch
        {
            "json" => "application/json",
            "xml" => "application/xml",
            "form-data" => "multipart/form-data",
            "raw" => "text/plain",
            _ => "application/json"
        };
    }

    [RelayCommand]
    private void AddQueryParameter() => QueryParameters.Add(new QueryParameterViewModel());

    [RelayCommand]
    private void RemoveQueryParameter(QueryParameterViewModel parameter) => QueryParameters.Remove(parameter);

    [RelayCommand]
    private void AddFormDataItem() => FormDataItems.Add(new FormDataItemViewModel());

    [RelayCommand]
    private void RemoveFormDataItem(FormDataItemViewModel item) => FormDataItems.Remove(item);

    [RelayCommand]
    private void AddHeaderItem() => HeaderItems.Add(new HeaderItemViewModel());

    [RelayCommand]
    private void RemoveHeaderItem(HeaderItemViewModel header)
    {
        if (!header.IsAutoGenerated)
        {
            HeaderItems.Remove(header);
        }
    }

    /// <summary>
    /// 从请求记录加载数据
    /// </summary>
    public void LoadFromRequest(RequestRecord request)
    {
        AssociatedRequest = request;
        TabTitle = GetTabTitle(request);
        SelectedMethod = request.Method;
        SelectedContentType = request.ContentType;

        // 解析URL并分离查询参数
        var (baseUrl, queryParams) = ParseUrlAndQueryParameters(request.Url);
        RequestUrl = baseUrl;

        // 清空现有的查询参数并加载新的
        QueryParameters.Clear();
        foreach (var param in queryParams)
        {
            QueryParameters.Add(new QueryParameterViewModel
            {
                Key = param.Key,
                Value = param.Value,
                IsEnabled = true,
                Description = "从接口URL解析"
            });
        }

        // 确保至少有一个空行供用户添加参数
        if (!QueryParameters.Any(p => string.IsNullOrEmpty(p.Key)))
        {
            QueryParameters.Add(new QueryParameterViewModel());
        }

        // 加载请求体
        RequestBody = request.Body ?? string.Empty;

        // 加载自定义头部
        CustomHeaders = request.Headers.Any() ? string.Join("\n", request.Headers.Select(h => $"{h.Key}: {h.Value}")) : string.Empty;

        // 清空现有的HeaderItems并重新生成
        HeaderItems.Clear();

        // 首先添加从请求记录中加载的自定义headers
        foreach (var header in request.Headers)
        {
            HeaderItems.Add(new HeaderItemViewModel
            {
                Key = header.Key,
                Value = header.Value,
                IsEnabled = true,
                IsAutoGenerated = false,
                Description = "从接口定义加载"
            });
        }

        // 然后生成自动headers
        GenerateAutoHeaders();

        // 清除之前的响应
        ClearResponse();
        IsModified = false; // 加载完成后重置修改状态

        System.Diagnostics.Debug.WriteLine($"已加载接口: {request.Name}");
        System.Diagnostics.Debug.WriteLine($"基础URL: {baseUrl}");
        System.Diagnostics.Debug.WriteLine($"解析到 {queryParams.Count} 个查询参数");
    }

    /// <summary>
    /// 解析URL并分离查询参数
    /// </summary>
    /// <param name="fullUrl">完整的URL</param>
    /// <returns>返回基础URL和查询参数字典</returns>
    private static (string baseUrl, Dictionary<string, string> queryParams) ParseUrlAndQueryParameters(string fullUrl)
    {
        var queryParams = new Dictionary<string, string>();

        if (string.IsNullOrWhiteSpace(fullUrl))
        {
            return (string.Empty, queryParams);
        }

        try
        {
            // 查找查询字符串的起始位置
            var queryIndex = fullUrl.IndexOf('?');
            if (queryIndex == -1)
            {
                // 没有查询参数
                return (fullUrl, queryParams);
            }

            var baseUrl = fullUrl[..queryIndex];
            var queryString = fullUrl[(queryIndex + 1)..];

            if (string.IsNullOrWhiteSpace(queryString))
            {
                return (baseUrl, queryParams);
            }

            // 解析查询参数
            var paramPairs = queryString.Split('&', StringSplitOptions.RemoveEmptyEntries);
            foreach (var pair in paramPairs)
            {
                var equalIndex = pair.IndexOf('=');
                if (equalIndex > 0)
                {
                    var key = Uri.UnescapeDataString(pair[..equalIndex].Trim());
                    var value = Uri.UnescapeDataString(pair[(equalIndex + 1)..].Trim());

                    if (!string.IsNullOrWhiteSpace(key))
                    {
                        // 如果已存在相同的key，添加序号区分
                        var finalKey = key;
                        var counter = 1;
                        while (queryParams.ContainsKey(finalKey))
                        {
                            finalKey = $"{key}_{counter}";
                            counter++;
                        }

                        queryParams[finalKey] = value;
                    }
                }
                else if (!string.IsNullOrWhiteSpace(pair))
                {
                    // 没有值的参数，值设为空字符串
                    var key = Uri.UnescapeDataString(pair.Trim());
                    if (!string.IsNullOrWhiteSpace(key))
                    {
                        queryParams[key] = string.Empty;
                    }
                }
            }

            return (baseUrl, queryParams);
        }
        catch (Exception ex)
        {
            System.Diagnostics.Debug.WriteLine($"解析URL参数失败: {ex.Message}");
            // 如果解析失败，返回原URL和空参数字典
            return (fullUrl, queryParams);
        }
    }

    [RelayCommand]
    private async Task SendRequestAsync()
    {
        try
        {
            ClearResponse();

            // 构建完整的URL（包含查询参数）
            var urlWithParams = BuildUrlWithQueryParams();

            // 构建请求头
            var headers = BuildHeaders();

            // 构建请求体
            var requestBody = BuildRequestBody();

            // 解析环境变量
            var resolvedUrl = await _environmentService.ResolveVariablesAsync(urlWithParams);

            // 发送请求
            HttpResponseResult response;
            switch (SelectedMethod.ToUpper())
            {
                case RequestMethodModel.Get:
                    response = await _httpClientService.GetAsync(resolvedUrl, headers);
                    break;
                case RequestMethodModel.Post:
                    response = await _httpClientService.PostAsync(resolvedUrl, requestBody, headers);
                    break;
                case RequestMethodModel.Put:
                    response = await _httpClientService.PutAsync(resolvedUrl, requestBody, headers);
                    break;
                case RequestMethodModel.Delete:
                    response = await _httpClientService.DeleteAsync(resolvedUrl, headers);
                    break;
                case RequestMethodModel.Patch:
                    response = await _httpClientService.PatchAsync(resolvedUrl, requestBody, headers);
                    break;
                default:
                    var method = new HttpMethod(SelectedMethod);
                    response = await _httpClientService.SendAsync(method, resolvedUrl, requestBody, headers);
                    break;
            }

            // 处理响应结果
            await UpdateResponseAsync(response);
        }
        catch (Exception ex)
        {
            await HandleRequestErrorAsync(ex);
        }
    }

    private async Task UpdateResponseAsync(HttpResponseResult response)
    {
        try
        {
            // 格式化响应内容和头部
            var formattedContent = FormatResponseContent(response.Content);
            var formattedHeaders = FormatResponseHeaders(response.Headers);

            // 记录调试信息
            System.Diagnostics.Debug.WriteLine($"原始响应内容长度: {response.Content?.Length ?? 0}");
            System.Diagnostics.Debug.WriteLine($"格式化后内容长度: {formattedContent?.Length ?? 0}");
            if (!string.IsNullOrEmpty(formattedContent))
            {
                System.Diagnostics.Debug.WriteLine($"响应内容预览: {formattedContent[..Math.Min(200, formattedContent.Length)]}");
            }

            // 更新响应状态信息（先更新这些，因为它们更新较快）
            ResponseStatusCode = response.StatusCode;
            ResponseStatusText = response.IsSuccess ? "Success" : response.ErrorMessage ?? "Error";
            ResponseTime = response.ResponseTimeMs;

            // 分步更新内容，确保UI有时间响应
            ResponseHeaders = formattedHeaders;

            // 为响应体内容添加额外的延迟，确保RichEditBox准备好接收内容
            await Task.Delay(50);
            ResponseContent = formattedContent;

            // 再次确认内容已设置
            await Task.Delay(10);
            if (string.IsNullOrEmpty(ResponseContent) && !string.IsNullOrEmpty(formattedContent))
            {
                System.Diagnostics.Debug.WriteLine("检测到响应内容未正确设置，重试...");
                ResponseContent = formattedContent;
            }
        }
        catch (Exception ex)
        {
            System.Diagnostics.Debug.WriteLine($"更新响应内容失败: {ex}");
            ResponseContent = $"处理响应内容时发生错误: {ex.Message}";
            ResponseStatusText = "Error";
            ResponseStatusCode = 0;
        }
    }

    private async Task HandleRequestErrorAsync(Exception ex)
    {
        System.Diagnostics.Debug.WriteLine($"请求发送失败: {ex}");

        ResponseContent = $"发生错误: {ex.Message}";
        ResponseStatusText = "Error";
        ResponseStatusCode = 0;
        ResponseTime = 0;
        ResponseHeaders = string.Empty;

        // 确保错误信息能正确显示
        await Task.Delay(10);
    }

    private string FormatResponseContent(string? content)
    {
        if (string.IsNullOrWhiteSpace(content))
            return "无响应内容";

        try
        {
            // 尝试格式化JSON
            if (content.TrimStart().StartsWith("{") || content.TrimStart().StartsWith("["))
            {
                var jsonObject = JsonConvert.DeserializeObject(content);
                if (jsonObject != null)
                {
                    var formatted = JsonConvert.SerializeObject(jsonObject, Formatting.Indented);
                    System.Diagnostics.Debug.WriteLine($"JSON格式化成功，原长度: {content.Length}, 格式化后长度: {formatted.Length}");
                    return formatted;
                }
            }
        }
        catch (Exception ex)
        {
            // 如果JSON格式化失败，记录错误但仍返回原始内容
            System.Diagnostics.Debug.WriteLine($"JSON格式化失败: {ex.Message}");
        }

        // 如果不是JSON或格式化失败，返回原内容
        return content;
    }

    private string FormatResponseHeaders(Dictionary<string, string> headers) =>
        string.Join("\n", headers.Select(h => $"{h.Key}: {h.Value}"));

    private void ClearResponse()
    {
        ResponseContent = string.Empty;
        ResponseHeaders = string.Empty;
        ResponseStatusCode = 0;
        ResponseStatusText = string.Empty;
        ResponseTime = 0;
    }

    private string GetTabTitle(RequestRecord request)
    {
        // 如果有自定义名称且不包含HTTP方法，直接使用
        if (!string.IsNullOrWhiteSpace(request.Name) &&
            request.Name != $"{request.Method} {request.Url}" &&
            !request.Name.StartsWith($"{request.Method} "))
        {
            return request.Name;
        }

        // 从URL中提取路径作为标题，不包含HTTP方法
        if (Uri.TryCreate(request.Url, UriKind.Absolute, out var uri))
        {
            var path = uri.PathAndQuery;

            // 如果路径为空或只是根路径，使用主机名
            if (string.IsNullOrEmpty(path) || path == "/")
            {
                return uri.Host;
            }

            // 如果路径太长，只显示最后几段
            if (path.Length > 40)
            {
                var segments = path.Split('/', StringSplitOptions.RemoveEmptyEntries);
                if (segments.Length > 2)
                {
                    return $".../{string.Join("/", segments.TakeLast(2))}";
                }
            }

            return path;
        }

        // 如果URL无法解析，尝试从原始URL中提取路径部分
        if (!string.IsNullOrWhiteSpace(request.Url))
        {
            var url = request.Url.Trim();

            // 尝试找到路径部分（去掉协议和域名）
            var schemeIndex = url.IndexOf("://");
            if (schemeIndex >= 0)
            {
                var afterScheme = url[(schemeIndex + 3)..];
                var pathStartIndex = afterScheme.IndexOf('/');
                if (pathStartIndex >= 0)
                {
                    var pathPart = afterScheme[pathStartIndex..];
                    if (pathPart.Length > 1) // 不只是 "/"
                    {
                        return pathPart.Length > 40 ? $"...{pathPart[^37..]}" : pathPart;
                    }
                }

                // 如果没有路径部分，使用域名
                var domainPart = pathStartIndex >= 0 ? afterScheme[..pathStartIndex] : afterScheme;
                return domainPart;
            }

            // 如果没有协议，直接使用URL（可能是相对路径）
            return url.Length > 40 ? $"...{url[^37..]}" : url;
        }

        return "新建请求";
    }

    private string BuildUrlWithQueryParams()
    {
        var baseUrl = RequestUrl;
        var enabledParams = QueryParameters.Where(p => p.IsEnabled && !string.IsNullOrWhiteSpace(p.Key)).ToList();

        if (!enabledParams.Any())
            return baseUrl;

        var queryString = string.Join("&", enabledParams.Select(p => $"{Uri.EscapeDataString(p.Key)}={Uri.EscapeDataString(p.Value)}"));

        if (baseUrl.Contains('?'))
            return $"{baseUrl}&{queryString}";
        else
            return $"{baseUrl}?{queryString}";
    }

    private Dictionary<string, string> BuildHeaders()
    {
        var headers = new Dictionary<string, string>();

        // 添加启用的自定义headers
        var enabledHeaders = HeaderItems.Where(h => h.IsEnabled && !string.IsNullOrWhiteSpace(h.Key)).ToList();
        foreach (var header in enabledHeaders)
        {
            headers[header.Key] = header.Value;
        }

        return headers;
    }

    private string BuildRequestBody()
    {
        return SelectedBodyType switch
        {
            "none" => string.Empty,
            "json" => UnifiedBodyContent,
            "xml" => UnifiedBodyContent,
            "raw" => UnifiedBodyContent,
            "form-data" => BuildFormDataBody(),
            _ => UnifiedBodyContent
        };
    }

    private string BuildFormDataBody()
    {
        var enabledItems = FormDataItems.Where(f => f.IsEnabled && !string.IsNullOrWhiteSpace(f.Key)).ToList();
        if (!enabledItems.Any())
            return string.Empty;

        // 对于 form-data，这里返回JSON格式的数据，实际实现中应该构建 multipart/form-data
        var formData = enabledItems.ToDictionary(f => f.Key, f => f.Value);
        return JsonConvert.SerializeObject(formData, Formatting.Indented);
    }

    private Dictionary<string, string> ParseHeaders()
    {
        var headers = new Dictionary<string, string>();

        if (string.IsNullOrWhiteSpace(CustomHeaders))
            return headers;

        var lines = CustomHeaders.Split('\n', StringSplitOptions.RemoveEmptyEntries);
        foreach (var line in lines)
        {
            var colonIndex = line.IndexOf(':');
            if (colonIndex > 0)
            {
                var key = line[..colonIndex].Trim();
                var value = line[(colonIndex + 1)..].Trim();
                if (!string.IsNullOrWhiteSpace(key) && !string.IsNullOrWhiteSpace(value))
                {
                    headers[key] = value;
                }
            }
        }

        return headers;
    }

    /// <summary>
    /// 响应编辑器的语言类型，根据内容行数动态决定
    /// </summary>
    public string ResponseEditorLanguage
    {
        get
        {
            if (string.IsNullOrWhiteSpace(ResponseContent))
                return "plaintext";

            try
            {
                // 计算行数（使用高效的计算方法）
                var lineCount = ResponseContent.Count(c => c == '\n') + 1;

                // 如果超过1万行，使用plaintext以提高性能
                if (lineCount > 10000)
                {
                    System.Diagnostics.Debug.WriteLine($"响应内容行数: {lineCount}，切换到plaintext模式以提高性能");
                    return "plaintext";
                }

                // 检查内容长度，如果太长也切换到plaintext
                if (ResponseContent.Length > 1000000) // 超过1MB
                {
                    System.Diagnostics.Debug.WriteLine($"响应内容大小: {ResponseContent.Length / 1024}KB，切换到plaintext模式以提高性能");
                    return "plaintext";
                }

                // 根据内容类型判断语言
                var trimmedContent = ResponseContent.TrimStart();

                // JSON检测
                if (trimmedContent.StartsWith("{") || trimmedContent.StartsWith("["))
                {
                    return "json";
                }

                // XML检测
                if (trimmedContent.StartsWith("<"))
                {
                    return "xml";
                }

                // HTML检测
                if (trimmedContent.StartsWith("<!DOCTYPE", StringComparison.OrdinalIgnoreCase) ||
                    trimmedContent.StartsWith("<html", StringComparison.OrdinalIgnoreCase))
                {
                    return "html";
                }

                System.Diagnostics.Debug.WriteLine($"响应内容行数: {lineCount}，使用自动检测的语言类型");
                return "plaintext";
            }
            catch (Exception ex)
            {
                System.Diagnostics.Debug.WriteLine($"检测响应编辑器语言类型时出错: {ex.Message}");
                return "plaintext";
            }
        }
    }

    partial void OnResponseContentChanged(string value)
    {
        // 当响应内容变化时，通知响应编辑器语言的变化
        OnPropertyChanged(nameof(ResponseEditorLanguage));
    }
}